/*
 * This file is generated by jOOQ.
 */
package zipkin2.storage.mysql.v1.internal.generated.tables;


import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import zipkin2.storage.mysql.v1.internal.generated.Keys;
import zipkin2.storage.mysql.v1.internal.generated.Zipkin;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ZipkinDependencies extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>zipkin.zipkin_dependencies</code>
     */
    public static final ZipkinDependencies ZIPKIN_DEPENDENCIES = new ZipkinDependencies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>zipkin.zipkin_dependencies.day</code>.
     */
    public final TableField<Record, LocalDate> DAY = createField(DSL.name("day"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_dependencies.parent</code>.
     */
    public final TableField<Record, String> PARENT = createField(DSL.name("parent"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_dependencies.child</code>.
     */
    public final TableField<Record, String> CHILD = createField(DSL.name("child"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_dependencies.call_count</code>.
     */
    public final TableField<Record, Long> CALL_COUNT = createField(DSL.name("call_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>zipkin.zipkin_dependencies.error_count</code>.
     */
    public final TableField<Record, Long> ERROR_COUNT = createField(DSL.name("error_count"), SQLDataType.BIGINT, this, "");

    private ZipkinDependencies(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ZipkinDependencies(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>zipkin.zipkin_dependencies</code> table reference
     */
    public ZipkinDependencies(String alias) {
        this(DSL.name(alias), ZIPKIN_DEPENDENCIES);
    }

    /**
     * Create an aliased <code>zipkin.zipkin_dependencies</code> table reference
     */
    public ZipkinDependencies(Name alias) {
        this(alias, ZIPKIN_DEPENDENCIES);
    }

    /**
     * Create a <code>zipkin.zipkin_dependencies</code> table reference
     */
    public ZipkinDependencies() {
        this(DSL.name("zipkin_dependencies"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zipkin.ZIPKIN;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_ZIPKIN_DEPENDENCIES_PRIMARY;
    }

    @Override
    public ZipkinDependencies as(String alias) {
        return new ZipkinDependencies(DSL.name(alias), this);
    }

    @Override
    public ZipkinDependencies as(Name alias) {
        return new ZipkinDependencies(alias, this);
    }

    @Override
    public ZipkinDependencies as(Table<?> alias) {
        return new ZipkinDependencies(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinDependencies rename(String name) {
        return new ZipkinDependencies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinDependencies rename(Name name) {
        return new ZipkinDependencies(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinDependencies rename(Table<?> name) {
        return new ZipkinDependencies(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinDependencies where(Condition condition) {
        return new ZipkinDependencies(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinDependencies where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinDependencies where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinDependencies where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinDependencies where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinDependencies where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinDependencies where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinDependencies where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinDependencies whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinDependencies whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
