/*
 * This file is generated by jOOQ.
 */
package zipkin2.storage.mysql.v1.internal.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import zipkin2.storage.mysql.v1.internal.generated.Indexes;
import zipkin2.storage.mysql.v1.internal.generated.Keys;
import zipkin2.storage.mysql.v1.internal.generated.Zipkin;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ZipkinAnnotations extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>zipkin.zipkin_annotations</code>
     */
    public static final ZipkinAnnotations ZIPKIN_ANNOTATIONS = new ZipkinAnnotations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>zipkin.zipkin_annotations.trace_id_high</code>. If non
     * zero, this means the trace uses 128 bit traceIds instead of 64 bit
     */
    public final TableField<Record, Long> TRACE_ID_HIGH = createField(DSL.name("trace_id_high"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "If non zero, this means the trace uses 128 bit traceIds instead of 64 bit");

    /**
     * The column <code>zipkin.zipkin_annotations.trace_id</code>. coincides
     * with zipkin_spans.trace_id
     */
    public final TableField<Record, Long> TRACE_ID = createField(DSL.name("trace_id"), SQLDataType.BIGINT.nullable(false), this, "coincides with zipkin_spans.trace_id");

    /**
     * The column <code>zipkin.zipkin_annotations.span_id</code>. coincides with
     * zipkin_spans.id
     */
    public final TableField<Record, Long> SPAN_ID = createField(DSL.name("span_id"), SQLDataType.BIGINT.nullable(false), this, "coincides with zipkin_spans.id");

    /**
     * The column <code>zipkin.zipkin_annotations.a_key</code>.
     * BinaryAnnotation.key or Annotation.value if type == -1
     */
    public final TableField<Record, String> A_KEY = createField(DSL.name("a_key"), SQLDataType.VARCHAR(255).nullable(false), this, "BinaryAnnotation.key or Annotation.value if type == -1");

    /**
     * The column <code>zipkin.zipkin_annotations.a_value</code>.
     * BinaryAnnotation.value(), which must be smaller than 64KB
     */
    public final TableField<Record, byte[]> A_VALUE = createField(DSL.name("a_value"), SQLDataType.BLOB, this, "BinaryAnnotation.value(), which must be smaller than 64KB");

    /**
     * The column <code>zipkin.zipkin_annotations.a_type</code>.
     * BinaryAnnotation.type() or -1 if Annotation
     */
    public final TableField<Record, Integer> A_TYPE = createField(DSL.name("a_type"), SQLDataType.INTEGER.nullable(false), this, "BinaryAnnotation.type() or -1 if Annotation");

    /**
     * The column <code>zipkin.zipkin_annotations.a_timestamp</code>. Used to
     * implement TTL; Annotation.timestamp or zipkin_spans.timestamp
     */
    public final TableField<Record, Long> A_TIMESTAMP = createField(DSL.name("a_timestamp"), SQLDataType.BIGINT, this, "Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp");

    /**
     * The column <code>zipkin.zipkin_annotations.endpoint_ipv4</code>. Null
     * when Binary/Annotation.endpoint is null
     */
    public final TableField<Record, Integer> ENDPOINT_IPV4 = createField(DSL.name("endpoint_ipv4"), SQLDataType.INTEGER, this, "Null when Binary/Annotation.endpoint is null");

    /**
     * The column <code>zipkin.zipkin_annotations.endpoint_ipv6</code>. Null
     * when Binary/Annotation.endpoint is null, or no IPv6 address
     */
    public final TableField<Record, byte[]> ENDPOINT_IPV6 = createField(DSL.name("endpoint_ipv6"), SQLDataType.BINARY(16), this, "Null when Binary/Annotation.endpoint is null, or no IPv6 address");

    /**
     * The column <code>zipkin.zipkin_annotations.endpoint_port</code>. Null
     * when Binary/Annotation.endpoint is null
     */
    public final TableField<Record, Short> ENDPOINT_PORT = createField(DSL.name("endpoint_port"), SQLDataType.SMALLINT, this, "Null when Binary/Annotation.endpoint is null");

    /**
     * The column <code>zipkin.zipkin_annotations.endpoint_service_name</code>.
     * Null when Binary/Annotation.endpoint is null
     */
    public final TableField<Record, String> ENDPOINT_SERVICE_NAME = createField(DSL.name("endpoint_service_name"), SQLDataType.VARCHAR(255), this, "Null when Binary/Annotation.endpoint is null");

    private ZipkinAnnotations(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ZipkinAnnotations(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>zipkin.zipkin_annotations</code> table reference
     */
    public ZipkinAnnotations(String alias) {
        this(DSL.name(alias), ZIPKIN_ANNOTATIONS);
    }

    /**
     * Create an aliased <code>zipkin.zipkin_annotations</code> table reference
     */
    public ZipkinAnnotations(Name alias) {
        this(alias, ZIPKIN_ANNOTATIONS);
    }

    /**
     * Create a <code>zipkin.zipkin_annotations</code> table reference
     */
    public ZipkinAnnotations() {
        this(DSL.name("zipkin_annotations"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zipkin.ZIPKIN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ZIPKIN_ANNOTATIONS_A_KEY, Indexes.ZIPKIN_ANNOTATIONS_A_KEY_2, Indexes.ZIPKIN_ANNOTATIONS_A_KEY_3, Indexes.ZIPKIN_ANNOTATIONS_A_KEY_4, Indexes.ZIPKIN_ANNOTATIONS_A_TYPE, Indexes.ZIPKIN_ANNOTATIONS_A_TYPE_2, Indexes.ZIPKIN_ANNOTATIONS_A_TYPE_3, Indexes.ZIPKIN_ANNOTATIONS_A_TYPE_4, Indexes.ZIPKIN_ANNOTATIONS_ENDPOINT_SERVICE_NAME, Indexes.ZIPKIN_ANNOTATIONS_ENDPOINT_SERVICE_NAME_2, Indexes.ZIPKIN_ANNOTATIONS_ENDPOINT_SERVICE_NAME_3, Indexes.ZIPKIN_ANNOTATIONS_ENDPOINT_SERVICE_NAME_4, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_2, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_3, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_4, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_11, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_12, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_2, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_3, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_5, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_6, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_8, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_9);
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH, Keys.KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_10, Keys.KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_4, Keys.KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_7);
    }

    @Override
    public ZipkinAnnotations as(String alias) {
        return new ZipkinAnnotations(DSL.name(alias), this);
    }

    @Override
    public ZipkinAnnotations as(Name alias) {
        return new ZipkinAnnotations(alias, this);
    }

    @Override
    public ZipkinAnnotations as(Table<?> alias) {
        return new ZipkinAnnotations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinAnnotations rename(String name) {
        return new ZipkinAnnotations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinAnnotations rename(Name name) {
        return new ZipkinAnnotations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinAnnotations rename(Table<?> name) {
        return new ZipkinAnnotations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinAnnotations where(Condition condition) {
        return new ZipkinAnnotations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinAnnotations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinAnnotations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinAnnotations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinAnnotations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinAnnotations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinAnnotations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinAnnotations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinAnnotations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinAnnotations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
