/*
 * This file is generated by jOOQ.
 */
package zipkin2.storage.mysql.v1.internal.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import zipkin2.storage.mysql.v1.internal.generated.Indexes;
import zipkin2.storage.mysql.v1.internal.generated.Keys;
import zipkin2.storage.mysql.v1.internal.generated.Zipkin;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ZipkinSpans extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>zipkin.zipkin_spans</code>
     */
    public static final ZipkinSpans ZIPKIN_SPANS = new ZipkinSpans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>zipkin.zipkin_spans.trace_id_high</code>. If non zero,
     * this means the trace uses 128 bit traceIds instead of 64 bit
     */
    public final TableField<Record, Long> TRACE_ID_HIGH = createField(DSL.name("trace_id_high"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "If non zero, this means the trace uses 128 bit traceIds instead of 64 bit");

    /**
     * The column <code>zipkin.zipkin_spans.trace_id</code>.
     */
    public final TableField<Record, Long> TRACE_ID = createField(DSL.name("trace_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.remote_service_name</code>.
     */
    public final TableField<Record, String> REMOTE_SERVICE_NAME = createField(DSL.name("remote_service_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.parent_id</code>.
     */
    public final TableField<Record, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>zipkin.zipkin_spans.debug</code>.
     */
    public final TableField<Record, Boolean> DEBUG = createField(DSL.name("debug"), SQLDataType.BIT, this, "");

    /**
     * The column <code>zipkin.zipkin_spans.start_ts</code>. Span.timestamp():
     * epoch micros used for endTs query and to implement TTL
     */
    public final TableField<Record, Long> START_TS = createField(DSL.name("start_ts"), SQLDataType.BIGINT, this, "Span.timestamp(): epoch micros used for endTs query and to implement TTL");

    /**
     * The column <code>zipkin.zipkin_spans.duration</code>. Span.duration():
     * micros used for minDuration and maxDuration query
     */
    public final TableField<Record, Long> DURATION = createField(DSL.name("duration"), SQLDataType.BIGINT, this, "Span.duration(): micros used for minDuration and maxDuration query");

    private ZipkinSpans(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ZipkinSpans(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>zipkin.zipkin_spans</code> table reference
     */
    public ZipkinSpans(String alias) {
        this(DSL.name(alias), ZIPKIN_SPANS);
    }

    /**
     * Create an aliased <code>zipkin.zipkin_spans</code> table reference
     */
    public ZipkinSpans(Name alias) {
        this(alias, ZIPKIN_SPANS);
    }

    /**
     * Create a <code>zipkin.zipkin_spans</code> table reference
     */
    public ZipkinSpans() {
        this(DSL.name("zipkin_spans"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zipkin.ZIPKIN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ZIPKIN_SPANS_NAME, Indexes.ZIPKIN_SPANS_NAME_2, Indexes.ZIPKIN_SPANS_NAME_3, Indexes.ZIPKIN_SPANS_NAME_4, Indexes.ZIPKIN_SPANS_REMOTE_SERVICE_NAME, Indexes.ZIPKIN_SPANS_REMOTE_SERVICE_NAME_2, Indexes.ZIPKIN_SPANS_REMOTE_SERVICE_NAME_3, Indexes.ZIPKIN_SPANS_REMOTE_SERVICE_NAME_4, Indexes.ZIPKIN_SPANS_START_TS, Indexes.ZIPKIN_SPANS_START_TS_2, Indexes.ZIPKIN_SPANS_START_TS_3, Indexes.ZIPKIN_SPANS_START_TS_4, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_2, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_3, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_4);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_ZIPKIN_SPANS_PRIMARY;
    }

    @Override
    public ZipkinSpans as(String alias) {
        return new ZipkinSpans(DSL.name(alias), this);
    }

    @Override
    public ZipkinSpans as(Name alias) {
        return new ZipkinSpans(alias, this);
    }

    @Override
    public ZipkinSpans as(Table<?> alias) {
        return new ZipkinSpans(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinSpans rename(String name) {
        return new ZipkinSpans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinSpans rename(Name name) {
        return new ZipkinSpans(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinSpans rename(Table<?> name) {
        return new ZipkinSpans(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinSpans where(Condition condition) {
        return new ZipkinSpans(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinSpans where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinSpans where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinSpans where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinSpans where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinSpans where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinSpans where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ZipkinSpans where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinSpans whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ZipkinSpans whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
