#
# Copyright 2015-2023 The OpenZipkin Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#

core:
  selector: zipkin
  zipkin:
    # The max length of service + instance names should be less than 200
    serviceNameMaxLength: ${ZIPKIN_SERVICE_NAME_MAX_LENGTH:70}
    # The period(in seconds) of refreshing the service cache. Default value is 10s.
    serviceCacheRefreshInterval: ${ZIPKIN_SERVICE_CACHE_REFRESH_INTERVAL:10}
    instanceNameMaxLength: ${ZIPKIN_INSTANCE_NAME_MAX_LENGTH:70}
    # The max length of service + endpoint names should be less than 240
    endpointNameMaxLength: ${ZIPKIN_ENDPOINT_NAME_MAX_LENGTH:150}
    recordDataTTL: ${ZIPKIN_CORE_RECORD_DATA_TTL:3} # Unit is day
    metricsDataTTL: ${ZIPKIN_CORE_METRICS_DATA_TTL:7} # Unit is day
    # The period of L1 aggregation flush to L2 aggregation. Unit is ms.
    l1FlushPeriod: ${ZIPKIN_CORE_L1_AGGREGATION_FLUSH_PERIOD:500}
    # The threshold of session time. Unit is ms. Default value is 70s.
    storageSessionTimeout: ${ZIPKIN_CORE_STORAGE_SESSION_TIMEOUT:70000}
    # The number of threads used to prepare metrics data to the storage.
    prepareThreads: ${ZIPKIN_PREPARE_THREADS:2}
    # The period of doing data persistence. Unit is second.Default value is 25s
    persistentPeriod: ${ZIPKIN_PERSISTENT_PERIOD:25}
    serverHost: ${ZIPKIN_SERVER_HOST:0.0.0.0}
    serverPort: ${ZIPKIN_SERVER_PORT:9411}
    serverMaxThreads: ${ZIPKIN_SERVER_MAX_THREADS:200}
    serverIdleTimeOut: ${ZIPKIN_SERVER_IDLE_TIMEOUT:30000}
    serverAcceptQueueSize: ${ZIPKIN_SERVER_QUEUE_SIZE:0}
    serverMaxRequestHeaderSize: ${ZIPKIN_SERVER_MAX_REQUEST_HEADER_SIZE:8192}
    serverThreadPoolQueueSize: ${ZIPKIN_SERVER_POOL_QUEUE_SIZE:-1}
    serverEnableTLS: ${ZIPKIN_SERVER_SSL_ENABLED:false}
    serverTLSKeyPath: ${ZIPKIN_SERVER_SSL_KEY_PATH:""}
    serverTLSCertChainPath: ${ZIPKIN_SERVER_SSL_CERT_CHAIN_PATH:""}
    clusterSslTrustedCAPath: ${ZIPKIN_SERVER_SSL_TRUSTED_CA_PATH:""}
    searchEnable: ${ZIPKIN_SEARCH_ENABLED:true}

storage: &storage
  selector: ${ZIPKIN_STORAGE:h2}
  elasticsearch:
    namespace: ${ZIPKIN_NAMESPACE:"zipkin"}
    clusterNodes: ${ZIPKIN_STORAGE_ES_CLUSTER_NODES:localhost:9200}
    protocol: ${ZIPKIN_STORAGE_ES_HTTP_PROTOCOL:"http"}
    connectTimeout: ${ZIPKIN_STORAGE_ES_CONNECT_TIMEOUT:3000}
    socketTimeout: ${ZIPKIN_STORAGE_ES_SOCKET_TIMEOUT:30000}
    responseTimeout: ${ZIPKIN_STORAGE_ES_RESPONSE_TIMEOUT:15000}
    numHttpClientThread: ${ZIPKIN_STORAGE_ES_NUM_HTTP_CLIENT_THREAD:0}
    user: ${ZIPKIN_ES_USER:""}
    password: ${ZIPKIN_ES_PASSWORD:""}
    trustStorePath: ${ZIPKIN_STORAGE_ES_SSL_JKS_PATH:""}
    trustStorePass: ${ZIPKIN_STORAGE_ES_SSL_JKS_PASS:""}
    secretsManagementFile: ${ZIPKIN_ES_SECRETS_MANAGEMENT_FILE:""} # Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.
    dayStep: ${ZIPKIN_STORAGE_DAY_STEP:1} # Represent the number of days in the one minute/hour/day index.
    indexShardsNumber: ${ZIPKIN_STORAGE_ES_INDEX_SHARDS_NUMBER:1} # Shard number of new indexes
    indexReplicasNumber: ${ZIPKIN_STORAGE_ES_INDEX_REPLICAS_NUMBER:1} # Replicas number of new indexes
    # Specify the settings for each index individually.
    # If configured, this setting has the highest priority and overrides the generic settings.
    specificIndexSettings: ${ZIPKIN_STORAGE_ES_SPECIFIC_INDEX_SETTINGS:""}
    # Super data set has been defined in the codes, such as trace segments.The following 3 config would be improve es performance when storage super size data in es.
    superDatasetDayStep: ${ZIPKIN_STORAGE_ES_SUPER_DATASET_DAY_STEP:-1} # Represent the number of days in the super size dataset record index, the default value is the same as dayStep when the value is less than 0
    superDatasetIndexShardsFactor: ${ZIPKIN_STORAGE_ES_SUPER_DATASET_INDEX_SHARDS_FACTOR:5} #  This factor provides more shards for the super data set, shards number = indexShardsNumber * superDatasetIndexShardsFactor. Also, this factor effects Zipkin traces.
    superDatasetIndexReplicasNumber: ${ZIPKIN_STORAGE_ES_SUPER_DATASET_INDEX_REPLICAS_NUMBER:0} # Represent the replicas number in the super size dataset record index, the default value is 0.
    indexTemplateOrder: ${ZIPKIN_STORAGE_ES_INDEX_TEMPLATE_ORDER:0} # the order of index template
    bulkActions: ${ZIPKIN_STORAGE_ES_BULK_ACTIONS:5000} # Execute the async bulk record data every ${ZIPKIN_STORAGE_ES_BULK_ACTIONS} requests
    batchOfBytes: ${ZIPKIN_STORAGE_ES_BATCH_OF_BYTES:10485760} # A threshold to control the max body size of ElasticSearch Bulk flush.
    # flush the bulk every 5 seconds whatever the number of requests
    flushInterval: ${ZIPKIN_STORAGE_ES_FLUSH_INTERVAL:5}
    concurrentRequests: ${ZIPKIN_STORAGE_ES_CONCURRENT_REQUESTS:2} # the number of concurrent requests
    resultWindowMaxSize: ${ZIPKIN_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000}
    metadataQueryMaxSize: ${ZIPKIN_STORAGE_ES_QUERY_MAX_SIZE:10000}
    scrollingBatchSize: ${ZIPKIN_STORAGE_ES_SCROLLING_BATCH_SIZE:5000}
    segmentQueryMaxSize: ${ZIPKIN_STORAGE_ES_QUERY_SEGMENT_SIZE:200}
    profileTaskQueryMaxSize: ${ZIPKIN_STORAGE_ES_QUERY_PROFILE_TASK_SIZE:200}
    profileDataQueryBatchSize: ${ZIPKIN_STORAGE_ES_QUERY_PROFILE_DATA_BATCH_SIZE:100}
    oapAnalyzer: ${ZIPKIN_STORAGE_ES_OAP_ANALYZER:"{\"analyzer\":{\"oap_analyzer\":{\"type\":\"stop\"}}}"} # the oap analyzer.
    oapLogAnalyzer: ${ZIPKIN_STORAGE_ES_OAP_LOG_ANALYZER:"{\"analyzer\":{\"oap_log_analyzer\":{\"type\":\"standard\"}}}"} # the oap log analyzer. It could be customized by the ES analyzer configuration to support more language log formats, such as Chinese log, Japanese log and etc.
    advanced: ${ZIPKIN_STORAGE_ES_ADVANCED:""}
    # Enable shard metrics and records indices into multi-physical indices, one index template per metric/meter aggregation function or record.
    logicSharding: ${ZIPKIN_STORAGE_ES_LOGIC_SHARDING:false}
    # Custom routing can reduce the impact of searches. Instead of having to fan out a search request to all the shards in an index, the request can be sent to just the shard that matches the specific routing value (or values).
    enableCustomRouting: ${ZIPKIN_STORAGE_ES_ENABLE_CUSTOM_ROUTING:false}
  h2:
    properties:
      jdbcUrl: ${ZIPKIN_STORAGE_H2_URL:jdbc:h2:mem:zipkin-db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE}
      dataSource.user: ${ZIPKIN_STORAGE_H2_USER:sa}
    metadataQueryMaxSize: ${ZIPKIN_STORAGE_H2_QUERY_MAX_SIZE:5000}
    maxSizeOfBatchSql: ${ZIPKIN_STORAGE_MAX_SIZE_OF_BATCH_SQL:100}
    asyncBatchPersistentPoolSize: ${ZIPKIN_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:1}
  mysql:
    properties:
      jdbcUrl: ${ZIPKIN_JDBC_URL:"jdbc:mysql://localhost:3306/zipkin?rewriteBatchedStatements=true&allowMultiQueries=true"}
      driverClassName: org.mariadb.jdbc.Driver
      dataSource.user: ${ZIPKIN_DATA_SOURCE_USER:zipkin}
      dataSource.password: ${ZIPKIN_DATA_SOURCE_PASSWORD:zipkin}
      dataSource.cachePrepStmts: ${ZIPKIN_DATA_SOURCE_CACHE_PREP_STMTS:true}
      dataSource.prepStmtCacheSize: ${ZIPKIN_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:250}
      dataSource.prepStmtCacheSqlLimit: ${ZIPKIN_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:2048}
      dataSource.useServerPrepStmts: ${ZIPKIN_DATA_SOURCE_USE_SERVER_PREP_STMTS:true}
    metadataQueryMaxSize: ${ZIPKIN_STORAGE_MYSQL_QUERY_MAX_SIZE:5000}
    maxSizeOfBatchSql: ${ZIPKIN_STORAGE_MAX_SIZE_OF_BATCH_SQL:2000}
    asyncBatchPersistentPoolSize: ${ZIPKIN_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:4}
  postgresql:
    properties:
      jdbcUrl: ${ZIPKIN_JDBC_URL:"jdbc:postgresql://localhost:5432/zipkin"}
      dataSource.user: ${ZIPKIN_DATA_SOURCE_USER:postgres}
      dataSource.password: ${ZIPKIN_DATA_SOURCE_PASSWORD:123456}
      dataSource.cachePrepStmts: ${ZIPKIN_DATA_SOURCE_CACHE_PREP_STMTS:true}
      dataSource.prepStmtCacheSize: ${ZIPKIN_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:250}
      dataSource.prepStmtCacheSqlLimit: ${ZIPKIN_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:2048}
      dataSource.useServerPrepStmts: ${ZIPKIN_DATA_SOURCE_USE_SERVER_PREP_STMTS:true}
    metadataQueryMaxSize: ${ZIPKIN_STORAGE_MYSQL_QUERY_MAX_SIZE:5000}
    maxSizeOfBatchSql: ${ZIPKIN_STORAGE_MAX_SIZE_OF_BATCH_SQL:2000}
    asyncBatchPersistentPoolSize: ${ZIPKIN_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:4}
  banyandb:
    host: ${ZIPKIN_STORAGE_BANYANDB_HOST:127.0.0.1}
    port: ${ZIPKIN_STORAGE_BANYANDB_PORT:17912}
    maxBulkSize: ${ZIPKIN_STORAGE_BANYANDB_MAX_BULK_SIZE:5000}
    flushInterval: ${ZIPKIN_STORAGE_BANYANDB_FLUSH_INTERVAL:15}
    metricsShardsNumber: ${ZIPKIN_STORAGE_BANYANDB_METRICS_SHARDS_NUMBER:1}
    recordShardsNumber: ${ZIPKIN_STORAGE_BANYANDB_RECORD_SHARDS_NUMBER:1}
    superDatasetShardsFactor: ${ZIPKIN_STORAGE_BANYANDB_SUPERDATASET_SHARDS_FACTOR:2}
    concurrentWriteThreads: ${ZIPKIN_STORAGE_BANYANDB_CONCURRENT_WRITE_THREADS:15}
    profileTaskQueryMaxSize: ${ZIPKIN_STORAGE_BANYANDB_PROFILE_TASK_QUERY_MAX_SIZE:200} # the max number of fetch task in a request
    blockIntervalHours: ${ZIPKIN_STORAGE_BANYANDB_BLOCK_INTERVAL_HOURS:24} # Unit is hour
    segmentIntervalDays: ${ZIPKIN_STORAGE_BANYANDB_SEGMENT_INTERVAL_DAYS:1} # Unit is day
    superDatasetBlockIntervalHours: ${ZIPKIN_STORAGE_BANYANDB_SUPER_DATASET_BLOCK_INTERVAL_HOURS:4} # Unit is hour
    superDatasetSegmentIntervalDays: ${ZIPKIN_STORAGE_BANYANDB_SUPER_DATASET_SEGMENT_INTERVAL_DAYS:1} # Unit is day
    specificGroupSettings: ${ZIPKIN_STORAGE_BANYANDB_SPECIFIC_GROUP_SETTINGS:""} # For example, {"group1": {"blockIntervalHours": 4, "segmentIntervalDays": 1}}
  cassandra:
    keyspace: ${ZIPKIN_STORAGE_CASSANDRA_KEYSPACE:zipkin}
    # Comma separated list of host addresses part of Cassandra cluster. Ports default to 9042 but you can also specify a custom port with 'host:port'.
    contactPoints: ${ZIPKIN_STORAGE_CASSANDRA_CONTACT_POINTS:localhost}
    # Name of the datacenter that will be considered "local" for load balancing.
    localDc: ${ZIPKIN_STORAGE_CASSANDRA_LOCAL_DC:datacenter1}
    # Will throw an exception on startup if authentication fails.
    username: ${ZIPKIN_STORAGE_CASSANDRA_USERNAME:}
    password: ${ZIPKIN_STORAGE_CASSANDRA_PASSWORD:}
    # Ensuring that schema exists, if enabled tries to execute script /zipkin-server/storage-cassandra/resources/zipkin-schemas.cql.
    ensureSchema: ${ZIPKIN_STORAGE_CASSANDRA_ENSURE_SCHEMA:true}
    # Max pooled connections per datacenter-local host.
    maxConnections: ${ZIPKIN_STORAGE_CASSANDRA_MAX_CONNECTIONS:8}
    # Using ssl for connection, rely on Keystore
    use-ssl: ${ZIPKIN_STORAGE_CASSANDRA_USE_SSL:false}
    maxSizeOfBatchCql: ${ZIPKIN_STORAGE_CASSANDRA_MAX_SIZE_OF_BATCH_CQL:2000}
    asyncBatchPersistentPoolSize: ${ZIPKIN_STORAGE_CASSANDRA_ASYNC_BATCH_PERSISTENT_POOL_SIZE:4}

zipkin-dependency-storage-ext: *storage

receiver-zipkin:
  selector: zipkin
  zipkin:
    # Defines a set of span tag keys which are searchable.
    # The max length of key=value should be less than 256 or will be dropped.
    searchableTracesTags: ${ZIPKIN_SEARCHABLE_TAG_KEYS:http.method}
    # The trace sample rate precision is 0.0001, should be between 0 and 1
    traceSampleRate: ${ZIPKIN_SAMPLE_RATE:1}

receiver-zipkin-http:
  selector: ${ZIPKIN_RECEIVER_ZIPKIN_HTTP:default}
  default:

receiver-zipkin-kafka:
  selector: ${ZIPKIN_RECEIVER_ZIPKIN_KAFKA:-}
  default:
    kafkaBootstrapServers: ${ZIPKIN_KAFKA_SERVERS:localhost:9092}
    kafkaGroupId: ${ZIPKIN_KAFKA_GROUP_ID:zipkin}
    kafkaTopic: ${ZIPKIN_KAFKA_TOPIC:zipkin}
    # Kafka consumer config, JSON format as Properties. If it contains the same key with above, would override.
    kafkaConsumerConfig: ${ZIPKIN_KAFKA_CONSUMER_CONFIG:"{\"auto.offset.reset\":\"earliest\",\"enable.auto.commit\":true}"}
    # The Count of the topic consumers
    kafkaConsumers: ${ZIPKIN_KAFKA_CONSUMERS:1}
    kafkaHandlerThreadPoolSize: ${ZIPKIN_KAFKA_HANDLER_THREAD_POOL_SIZE:-1}
    kafkaHandlerThreadPoolQueueSize: ${ZIPKIN_KAFKA_HANDLER_THREAD_POOL_QUEUE_SIZE:-1}

receiver-zipkin-activemq:
  selector: ${ZIPKIN_RECEIVER_ZIPKIN_ACTIVEMQ:-}
  default:
    # ActiveMQ broker url. Ex. tcp://localhost:61616 or failover:(tcp://localhost:61616,tcp://remotehost:61616)
    url: ${ZIPKIN_ACTIVEMQ_URL:}
    # Queue from which to collect span messages.
    queue: ${ZIPKIN_ACTIVEMQ_QUEUE:zipkin}
    # Number of concurrent span consumers.
    concurrency: ${ZIPKIN_ACTIVEMQ_CONCURRENCY:1}
    # Optional username to connect to the broker
    username: ${ZIPKIN_ACTIVEMQ_USERNAME:}
    # Optional password to connect to the broker
    password: ${ZIPKIN_ACTIVEMQ_PASSWORD:}

receiver-zipkin-rabbitmq:
  selector: ${ZIPKIN_RECEIVER_ZIPKIN_rabbitmq:-}
  default:
    # RabbitMQ server address list (comma-separated list of host:port)
    addresses: ${ZIPKIN_RECEIVER_RABBIT_ADDRESSES:}
    concurrency: ${ZIPKIN_RECEIVER_RABBIT_CONCURRENCY:1}
    # TCP connection timeout in milliseconds
    connection-timeout: ${ZIPKIN_RECEIVER_RABBIT_CONNECTION_TIMEOUT:60000}
    password: ${ZIPKIN_RECEIVER_RABBIT_PASSWORD:guest}
    queue: ${ZIPKIN_RECEIVER_RABBIT_QUEUE:zipkin}
    username: ${ZIPKIN_RECEIVER_RABBIT_USER:guest}
    virtual-host: ${ZIPKIN_RECEIVER_RABBIT_VIRTUAL_HOST:/}
    useSsl: ${ZIPKIN_RECEIVER_RABBIT_USE_SSL:false}
    uri: ${ZIPKIN_RECEIVER_RABBIT_URI:}

receiver-zipkin-scribe:
  selector: ${ZIPKIN_RECEIVER_ZIPKIN_SCRIBE:-}
  default:
    category: ${ZIPKIN_SCRIBE_CATEGORY:zipkin}
    port: ${ZIPKIN_COLLECTOR_PORT:9410}

receiver-zipkin-grpc:
  selector: ${ZIPKIN_RECEIVER_ZIPKIN_GRPC:-}
  default:

receiver-otel:
  selector: ${SW_OTEL_RECEIVER:zipkin}
  zipkin:

## This module is for Zipkin query API and support zipkin-lens UI
query-zipkin:
  selector: ${ZIPKIN_QUERY_ZIPKIN:zipkin}
  zipkin:
    restHost: ${ZIPKIN_QUERY_REST_HOST:0.0.0.0}
    # The port number of the HTTP service, the default HTTP service in the core would be used if the value is smaller than 0.
    restPort: ${ZIPKIN_QUERY_REST_PORT:-1}
    restContextPath: ${ZIPKIN_QUERY_REST_CONTEXT_PATH:/}
    restMaxThreads: ${ZIPKIN_QUERY_REST_MAX_THREADS:200}
    restIdleTimeOut: ${ZIPKIN_QUERY_REST_IDLE_TIMEOUT:30000}
    restAcceptQueueSize: ${ZIPKIN_QUERY_REST_QUEUE_SIZE:0}
    restMaxRequestHeaderSize: ${ZIPKIN_QUERY_REST_MAX_REQUEST_HEADER_SIZE:8192}
    strictTraceId: ${ZIPKIN_QUERY_STRICT_TRACE_ID:true}
    allowedOrigins: ${ZIPKIN_QUERY_ALLOWED_ORIGINS:"*"}
    # Default look back for traces and autocompleteTags, 1 day in millis
    lookback: ${ZIPKIN_QUERY_LOOKBACK:86400000}
    # The Cache-Control max-age (seconds) for serviceNames, remoteServiceNames and spanNames
    namesMaxAge: ${ZIPKIN_QUERY_NAMES_MAX_AGE:300}
    ## The below config are OAP support for zipkin-lens UI
    # Default traces query max size
    uiQueryLimit: ${ZIPKIN_QUERY_UI_QUERY_LIMIT:10}
    # Default look back on the UI for search traces, 15 minutes in millis
    uiDefaultLookback: ${ZIPKIN_QUERY_UI_DEFAULT_LOOKBACK:900000}
    uiEnable: ${ZIPKIN_QUERY_UI_ENABLE:true}
    uiBasePath: ${ZIPKIN_QUERY_UI_BASE_PATH:/zipkin}
    dependencyEnabled: ${ZIPKIN_QUERY_DEPENDENCY_ENABLED:true}
    dependencyLowErrorRate: ${ZIPKIN_QUERY_DEPENDENCY_LOW_ERROR_RATE:0.5}
    dependencyHighErrorRate: ${ZIPKIN_QUERY_DEPENDENCY_HIGH_ERROR_RATE:0.75}

query-health:
  selector: ${ZIPKIN_QUERY_HEALTH:zipkin}
  zipkin:
    restHost: ${ZIPKIN_QUERY_HEALTH_REST_HOST:0.0.0.0}
    # The port number of the HTTP service, the default HTTP service in the core would be used if the value is smaller than 0.
    restPort: ${ZIPKIN_QUERY_HEALTH_REST_PORT:-1}
    restContextPath: ${ZIPKIN_QUERY_HEALTH_REST_CONTEXT_PATH:/}
    restMaxThreads: ${ZIPKIN_QUERY_HEALTH_REST_MAX_THREADS:200}
    restIdleTimeOut: ${ZIPKIN_QUERY_HEALTH_REST_IDLE_TIMEOUT:30000}
    restAcceptQueueSize: ${ZIPKIN_QUERY_HEALTH_REST_QUEUE_SIZE:0}
    restMaxRequestHeaderSize: ${ZIPKIN_QUERY_HEALTH_REST_MAX_REQUEST_HEADER_SIZE:8192}

telemetry:
  selector: ${ZIPKIN_TELEMETRY:zipkin}
  none:
  zipkin:
    restHost: ${ZIPKIN_QUERY_HEALTH_REST_HOST:0.0.0.0}
    # The port number of the HTTP service, the default HTTP service in the core would be used if the value is smaller than 0.
    restPort: ${ZIPKIN_QUERY_HEALTH_REST_PORT:-1}
    restContextPath: ${ZIPKIN_QUERY_HEALTH_REST_CONTEXT_PATH:/}
    restMaxThreads: ${ZIPKIN_QUERY_HEALTH_REST_MAX_THREADS:200}
    restIdleTimeOut: ${ZIPKIN_QUERY_HEALTH_REST_IDLE_TIMEOUT:30000}
    restAcceptQueueSize: ${ZIPKIN_QUERY_HEALTH_REST_QUEUE_SIZE:0}
    restMaxRequestHeaderSize: ${ZIPKIN_QUERY_HEALTH_REST_MAX_REQUEST_HEADER_SIZE:8192}

cluster:
  selector: standalone
  standalone:
  # Please check your ZooKeeper is 3.5+, However, it is also compatible with ZooKeeper 3.4.x. Replace the ZooKeeper 3.5+
  # library the oap-libs folder with your ZooKeeper 3.4.x library.
  zookeeper:
    namespace: ${ZIPKIN_NAMESPACE:"zipkin"}
    hostPort: ${ZIPKIN_CLUSTER_ZK_HOST_PORT:localhost:2181}
    # Retry Policy
    baseSleepTimeMs: ${ZIPKIN_CLUSTER_ZK_SLEEP_TIME:1000} # initial amount of time to wait between retries
    maxRetries: ${ZIPKIN_CLUSTER_ZK_MAX_RETRIES:3} # max number of times to retry
    # Enable ACL
    enableACL: ${ZIPKIN_ZK_ENABLE_ACL:false} # disable ACL in default
    schema: ${ZIPKIN_ZK_SCHEMA:digest} # only support digest schema
    expression: ${ZIPKIN_ZK_EXPRESSION:zipkin:zipkin}
    internalComHost: ${ZIPKIN_CLUSTER_INTERNAL_COM_HOST:""}
    internalComPort: ${ZIPKIN_CLUSTER_INTERNAL_COM_PORT:-1}
  kubernetes:
    namespace: ${ZIPKIN_CLUSTER_K8S_NAMESPACE:default}
    labelSelector: ${ZIPKIN_CLUSTER_K8S_LABEL:app=collector,release=zipkin}
    uidEnvName: ${ZIPKIN_CLUSTER_K8S_UID:ZIPKIN_COLLECTOR_UID}
  consul:
    serviceName: ${ZIPKIN_SERVICE_NAME:"Zipkin_Cluster"}
    # Consul cluster nodes, example: 10.0.0.1:8500,10.0.0.2:8500,10.0.0.3:8500
    hostPort: ${ZIPKIN_CLUSTER_CONSUL_HOST_PORT:localhost:8500}
    aclToken: ${ZIPKIN_CLUSTER_CONSUL_ACLTOKEN:""}
    internalComHost: ${ZIPKIN_CLUSTER_INTERNAL_COM_HOST:""}
    internalComPort: ${ZIPKIN_CLUSTER_INTERNAL_COM_PORT:-1}
  etcd:
    # etcd cluster nodes, example: 10.0.0.1:2379,10.0.0.2:2379,10.0.0.3:2379
    endpoints: ${ZIPKIN_CLUSTER_ETCD_ENDPOINTS:localhost:2379}
    namespace: ${ZIPKIN_CLUSTER_ETCD_NAMESPACE:/zipkin}
    serviceName: ${ZIPKIN_CLUSTER_ETCD_SERVICE_NAME:"Zipkin_Cluster"}
    authentication: ${ZIPKIN_CLUSTER_ETCD_AUTHENTICATION:false}
    user: ${ZIPKIN_CLUSTER_ETCD_USER:}
    password: ${ZIPKIN_CLUSTER_ETCD_PASSWORD:}
    internalComHost: ${ZIPKIN_CLUSTER_INTERNAL_COM_HOST:""}
    internalComPort: ${ZIPKIN_CLUSTER_INTERNAL_COM_PORT:-1}
  nacos:
    serviceName: ${ZIPKIN_SERVICE_NAME:"Zipkin_Cluster"}
    hostPort: ${ZIPKIN_CLUSTER_NACOS_HOST_PORT:localhost:8848}
    # Nacos Configuration namespace
    namespace: ${ZIPKIN_CLUSTER_NACOS_NAMESPACE:"public"}
    # Nacos auth username
    username: ${ZIPKIN_CLUSTER_NACOS_USERNAME:""}
    password: ${ZIPKIN_CLUSTER_NACOS_PASSWORD:""}
    # Nacos auth accessKey
    accessKey: ${ZIPKIN_CLUSTER_NACOS_ACCESSKEY:""}
    secretKey: ${ZIPKIN_CLUSTER_NACOS_SECRETKEY:""}
    internalComHost: ${ZIPKIN_CLUSTER_INTERNAL_COM_HOST:""}
    internalComPort: ${ZIPKIN_CLUSTER_INTERNAL_COM_PORT:-1}