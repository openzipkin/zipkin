#!/bin/sh
#
# Copyright The OpenZipkin Authors
# SPDX-License-Identifier: Apache-2.0
#

# HEALTHCHECK for use in `docker ps`, `docker-compose ps`, or a readiness probe in k8s.
#
# The following variables are read from ENV in the Dockerfile or env readable from pid 1.
# * HEALTHCHECK_KIND - must be "http" or "tcp". Defaults to "http"
#   * When "http" the GET path to check is /health unless overridden by HEALTHCHECK_PATH
# * HEALTHCHECK_IP - Defaults to $(hostname -i || 127.0.0.1)
# * HEALTHCHECK_PORT - Not always the service port, but in Zipkin it typically is. No default
#
# Setup like this:
# # We use a 30s start period to avoid marking the container unhealthy on slow or contended CI hosts
#  HEALTHCHECK --interval=1s --start-period=30s --timeout=5s CMD ["docker-healthcheck"]
#
# Note: this is named docker-healthcheck, not docker_healthcheck like our other scripts. That's due
# to conventions in https://github.com/docker-library/healthcheck/

# Fail on unset variables, but don't quit on rc!=0, so we can log what happened
set -u +e

# Export healthcheck variables we can read from pid 1. Some processes such as nginx wipe env. In
# that case, this will still be able to see variables set as ENV instructions in the Dockerfile.
export `cat /proc/1/environ| tr '\0' '\n'| \
  egrep '^(HEALTHCHECK_KIND|HEALTHCHECK_IP|HEALTHCHECK_PATH|HEALTHCHECK_PORT)='`

kind=${HEALTHCHECK_KIND:-http}
ip=${HEALTHCHECK_IP:-$(hostname -i || echo '127.0.0.1')}
port=${HEALTHCHECK_PORT?-is required}

case ${kind} in
  http )
    path=${HEALTHCHECK_PATH:-/health}
    endpoint="http://${ip}:${port}${path}"
    # Use b3:0 to ensure health checks aren't traced
    # Use timeout 1s (-T 1) as the health check interval is often 1s
    out=$(wget -T 1 -qO- "${endpoint}" --header=b3:0 2>&1)
    rc=$?
    ;;
  tcp )
    # Use timeout 1s (-w 1) as the health check interval is often 1s
    out=$(nc -w 1 -z ${ip} ${port} 2>&1)
    rc=$?
    ;;
  * )
    >&2 echo "Invalid HEALTHCHECK_KIND: ${kind}"
    exit 1
    ;;
esac

if [ "$rc" = "0" ]; then exit 0; fi
>&2 echo "Health check failed with code ${rc} response: ${out}"
exit 1
